%\VignetteIndexEntry{Analyzing RNA-Seq data with the "DESeq2" package}
%\VignettePackage{DESeq2shaman}
%\VignetteEngine{knitr::knitr}

% To compile this document
% library('knitr'); rm(list=ls()); knit('DESeq2.Rnw')

\documentclass[12pt]{article}

\newcommand{\deseqtwo}{\textit{DESeq2}}
\newcommand{\lowtilde}{\raise.17ex\hbox{$\scriptstyle\mathtt{\sim}$}}

<<knitr, echo=FALSE, results="hide">>=
library("knitr")
opts_chunk$set(tidy=FALSE,dev="png",fig.show="hide",
               fig.width=4,fig.height=4.5,
               message=FALSE)
@ 

<<style, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@

<<loadDESeq2, echo=FALSE>>=
library("DESeq2shaman")
@


\author{Michael Love$^{1*}$, Simon Anders$^{2}$, Wolfgang Huber$^{2}$ \\[1em] \small{$^{1}$ Department of Biostatistics, Dana Farber Cancer Institute and} \\ \small{Harvard School of Public Health, Boston, US;} \\ \small{$^{2}$ European Molecular Biology Laboratory (EMBL), Heidelberg, Germany} \\ \small{\texttt{$^*$michaelisaiahlove (at) gmail.com}}}

\title{Differential analysis of count data -- the DESeq2 package}

\begin{document}

\maketitle

\begin{abstract}
  A basic task in the analysis of count data from RNA-Seq is the detection of
  differentially expressed genes. The count data are presented as a table which reports,
  for each sample, the number of sequence fragments that have been assigned to each
  gene. Analogous data also arise for other assay types, including comparative ChIP-Seq,
  HiC, shRNA screening, mass spectrometry.  An important analysis question is the
  quantification and statistical inference of systematic changes between conditions, as
  compared to within-condition variability. The package \deseqtwo{} provides
  methods to test for differential expression by use of negative binomial generalized
  linear models; the estimates of dispersion and logarithmic fold changes 
  incorporate data-driven prior distributions\footnote{Other \Bioconductor{} packages 
  with similar aims are \Biocpkg{edgeR}, \Biocpkg{baySeq}, \Biocpkg{DSS} and 
  \Biocpkg{limma}.}. 
  This vignette explains the use of the package and demonstrates typical workflows.  
  An RNA-Seq workflow on the Bioconductor 
  website: \url{http://www.bioconductor.org/help/workflows/rnaseqGene/}
  (formerly the Beginner's Guide PDF), covers similar material to this
  vignette but at a slower pace, including the generation of count
  matrices from FASTQ files.

  \vspace{1em}
  
  \textbf{DESeq2 version:} \Sexpr{packageVersion("DESeq2shaman")}

  \vspace{1em}

  \begin{center}
    \begin{tabular}{ | l | }
      \hline 
      If you use \deseqtwo{} in published research, please cite:  \\
      \\
      M. I. Love, W. Huber, S. Anders: \textbf{Moderated estimation of} \\
      \textbf{fold change and dispersion for RNA-seq data with DESeq2}. \\
      \emph{Genome Biology} 2014, \textbf{15}:550. \\
      \url{http://dx.doi.org/10.1186/s13059-014-0550-8}  \\
      \hline 
    \end{tabular}
  \end{center}

\end{abstract}
  
<<options, results="hide", echo=FALSE>>=
options(digits=3, width=80, prompt=" ", continue=" ")
@

\newpage

\tableofcontents

\newpage

\section{Standard workflow}

\subsection{Quick start}

Here we show the most basic steps for a differential expression analysis.
These steps imply you have a \Rclass{SummarizedExperiment} object
\Robject{se} with a column \Robject{condition} in \Robject{colData(se)}.

<<quick, eval=FALSE>>=
dds <- DESeqDataSet(se = se, design = ~ condition)
dds <- DESeq(dds)
res <- results(dds)
@

\subsection{Input data} \label{sec:prep}

\subsubsection{Why raw counts?}

As input, the \deseqtwo{} package expects count data as obtained, e.\,g.,
from RNA-Seq or another high-throughput sequencing experiment, in the form of a
matrix of integer values. The value in the $i$-th row and the $j$-th column of
the matrix tells how many reads have been mapped to gene $i$ in sample $j$.
Analogously, for other types of assays, the rows of the matrix might correspond
e.\,g.\ to binding regions (with ChIP-Seq) or peptide sequences (with
quantitative mass spectrometry).

The count values must be raw counts of sequencing reads. This is important
for \deseqtwo{}'s statistical model \cite{Love2014} to hold, as only the actual
counts allow assessing the measurement precision correctly. Hence, please
do not supply other quantities, such as (rounded) normalized counts, or
counts of covered base pairs -- this will only lead to nonsensical results.

\subsubsection{\Rclass{SummarizedExperiment} input} \label{sec:sumExpInput}

The class used by the \deseqtwo{} package to store the read counts 
is \Rclass{DESeqDataSet} which extends the \Rclass{SummarizedExperiment} 
class of the \Biocpkg{GenomicRanges} package. 
This facilitates preparation steps and also downstream exploration of results. 
For counting aligned reads in genes, the \Rfunction{summarizeOverlaps} function of
\Biocpkg{GenomicAlignments} with \Robject{mode="Union"} is
encouraged, resulting in a \Rclass{SummarizedExperiment} object.

An example of the steps to produce a \Rclass{SummarizedExperiment} can
be found in an RNA-Seq workflow on the Bioconductor 
website: \url{http://www.bioconductor.org/help/workflows/rnaseqGene/}
and in the vignette for the data package \Biocexptpkg{airway}.
Here we load the \Rclass{SummarizedExperiment} from that package in
order to build a \Rclass{DESeqDataSet}.

<<loadSumExp,cache=TRUE>>=
library("airway")
data("airway")
se <- airway
@

A \Rclass{DESeqDataSet} object must have an associated design formula.  
The design formula expresses the variables which will be
used in modeling. The formula should be a tilde ($\sim$) followed by the
variables with plus signs between them (it will be coerced into an
\Rclass{formula} if it is not already).  An intercept is included,
representing the base mean of counts. The design can be changed later, 
however then all differential analysis steps should be repeated, 
as the design formula is used to estimate the dispersions and 
to estimate the log2 fold changes of the model. 
The constructor function below shows the generation of a
\Rclass{DESeqDataSet} from a \Rclass{SummarizedExperiment} \Robject{se}. 

\emph{Note}: In order to benefit from the default settings of the
package, you should put the variable of interest at the end of the
formula and make sure the control level is the first level.

<<sumExpInput, cache=TRUE>>=
library("DESeq2shaman")
ddsSE <- DESeqDataSet(se, design = ~ cell + dex)
ddsSE
@

\subsubsection{Count matrix input}

Alternatively, the function \Rfunction{DESeqDataSetFromMatrix} can be
used if you already have a matrix of read counts prepared.
For this function you should provide the counts matrix, the column
information as a \Rclass{DataFrame} or \Rclass{data.frame} and the design formula.
First, we load the \Robject{pasillaGenes} data object, in order to
extract a count matrix and phenotypic data.

<<loadPasilla>>=
library("pasilla")
library("Biobase")
data("pasillaGenes")
countData <- counts(pasillaGenes)
colData <- pData(pasillaGenes)[,c("condition","type")]
@ 

Now that we have a matrix of counts and the column information,
we can construct a \Rclass{DESeqDataSet}:

<<matrixInput>>=
dds <- DESeqDataSetFromMatrix(countData = countData,
                              colData = colData,
                              design = ~ condition)
dds
@

If you have additional feature data, it can be added to the
\Rclass{DESeqDataSet} by adding to the metadata columns of a newly
constructed object. (Here we add redundant data for demonstration, as
the gene names are already the rownames of the \Robject{dds}.)

<<addFeatureData>>=
featureData <- data.frame(gene=rownames(pasillaGenes))
(mcols(dds) <- DataFrame(mcols(dds), featureData))
@ 

\subsubsection{\textit{HTSeq} input}

You can use the function \Rfunction{DESeqDataSetFromHTSeqCount} if you
have \texttt{htseq-count} from the \textit{HTSeq} python  
package\footnote{available from \url{http://www-huber.embl.de/users/anders/HTSeq}, described in \cite{Anders:2014:htseq}}.  
For an example of using the python scripts, see the
\Biocexptpkg{pasilla} data package. First you will want to specify a
variable which points to the directory in which the \textit{HTSeq}
output files are located. 

<<htseqDirI, eval=FALSE>>=
directory <- "/path/to/your/files/"
@ 

However, for demonstration purposes only, the following line of
code points to the directory for the demo \textit{HTSeq} output
files packages for the \Biocexptpkg{pasilla} package.

<<htseqDirII>>=
directory <- system.file("extdata", package="pasilla", mustWork=TRUE)
@ 

We specify which files to read in using \Rfunction{list.files},
and select those files which contain the string \Rcode{"treated"} 
using \Rfunction{grep}. The \Rfunction{sub} function is used to 
chop up the sample filename to obtain the condition status, or 
you might alternatively read in a phenotypic table 
using \Rfunction{read.table}.

<<htseqInput, cache=TRUE>>=
sampleFiles <- grep("treated",list.files(directory),value=TRUE)
sampleCondition <- sub("(.*treated).*","\\1",sampleFiles)
sampleTable <- data.frame(sampleName = sampleFiles,
                          fileName = sampleFiles,
                          condition = sampleCondition)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
                                       directory = directory,
                                       design= ~ condition)
ddsHTSeq
@

\subsubsection{Note on factor levels} \label{sec:factorLevels}

In the three examples above, we applied the function \Rfunction{factor}
to the column of interest in \Robject{colData}, supplying a character
vector of levels. It is important to supply levels (otherwise the
levels are chosen in alphabetical order) and to put the ``control'' or ``untreated''
level as the first element ("base level"), so that the log2 fold changes
produced by default will be the expected comparison against the base level. 
An \R{} function for easily changing the base level is 
\Rfunction{relevel}. An example of setting the base level of a factor
with \Rfunction{relevel} is:

<<relevel>>=
dds$condition <- relevel(dds$condition, "untreated")
@ 

In addition, when subsetting the columns of a \Rclass{DESeqDataSet},
i.e., when removing certain samples from the analysis, it is possible
that all the samples for one or more levels of a variable in the design
formula are removed. In this case, the \Rfunction{droplevels} function can be used
to remove those levels which do not have samples in the current \Rclass{DESeqDataSet}:

<<droplevels>>=
dds$condition <- droplevels(dds$condition)
@ 

\subsubsection{Collapsing technical replicates}

\deseqtwo{} provides a function \Rfunction{collapseReplicates} which can
assist in combining the counts from technical replicates into single
columns. See the manual page for an example of the use of
\Rfunction{collapseReplicates}. 

\subsubsection{About the pasilla dataset}

We continue with the \Biocexptpkg{pasilla} data constructed from the
count matrix method above. This data set is from an experiment on
\emph{Drosophila melanogaster} cell cultures and investigated the
effect of RNAi knock-down of the splicing factor \emph{pasilla}
\cite{Brooks2010}.  The detailed transcript of the production of
the \Biocexptpkg{pasilla} data is provided in the vignette of the 
data package \Biocexptpkg{pasilla}.

\subsection{Differential expression analysis} \label{sec:de}

The standard differential expression analysis steps are wrapped
into a single function, \Rfunction{DESeq}. The steps of this function
are described in Section~\ref{sec:glm} and in the manual page for
\Robject{?DESeq}. The individual sub-functions which are called by \Rfunction{DESeq}
are still available, described in Section~\ref{sec:steps}. 

Results tables are generated using the function \Rfunction{results}, which
extracts a results table with log2 fold changes, $p$ values and adjusted
$p$ values. With no arguments to \Rfunction{results}, the results will be for
the last variable in the design formula, and if this is a factor, 
the comparison will be the last level of this variable over the first level. 

<<deseq, cache=TRUE>>=
dds <- DESeq(dds)
res <- results(dds)
@ 

These steps should take less than 30 seconds for most analyses. For
experiments with many samples (e.g. 100 samples), one can take
advantage of parallelized computation.  Both of the above functions
have an argument \Robject{parallel} which if set to \Robject{TRUE} can
be used to distribute computation across cores specified by the
\Rfunction{register} function of \Biocpkg{BiocParallel}. For example,
the following chunk (not evaluated here), would register 4 cores, and
then the two functions above, with \Robject{parallel=TRUE}, would
split computation over these cores. 

<<parallel, eval=FALSE>>=
library("BiocParallel")
register(MulticoreParam(4))
@

We can order our results table by the smallest adjusted $p$ value:

<<resOrder>>=
resOrdered <- res[order(res$padj),]
head(resOrdered)
@

We can summarize some basic tallies using the
\Rfunction{summary} function.

<<sumRes>>=
summary(res)
@ 

The \Rfunction{results} function contains a number of arguments to 
customize the results table which is generated.
Note that the \Rfunction{results} function automatically performs independent filtering 
based on the mean of counts for each gene, optimizing the number of genes
which will have an adjusted $p$ value below a given threshold. 
This will be discussed further in Section~\ref{sec:autoFilt}.

If a multi-factor design is used, or if the variable in the design
formula has more than two levels, the \Robject{contrast} argument of
\Rfunction{results} can be used to extract different comparisons from
the \Rclass{DESeqDataSet} returned by \Rfunction{DESeq}.
Multi-factor designs are discussed further in Section~\ref{sec:multifactor},
and the use of the \Robject{contrast} argument is dicussed in Section~\ref{sec:contrasts}.

For advanced users, note that all the values calculated by the \deseqtwo{} 
package are stored in the \Rclass{DESeqDataSet} object, and access 
to these values is discussed in Section~\ref{sec:access}.

\subsection{Exploring and exporting results}

\subsubsection{MA-plot}

\begin{figure}
\centering
\includegraphics[width=.45\textwidth]{figure/MANoPrior-1}
\includegraphics[width=.45\textwidth]{figure/MA-1}
\caption{
  \textbf{MA-plot.} 
  These plots show the log2 fold changes from the treatment over
  the mean of normalized counts, i.e. the average of counts normalized by
  size factors. The left plot shows the ``unshrunken'' log2 fold changes, 
  while the right plot, produced by the code above, shows the shrinkage 
  of log2 fold changes resulting from the incorporation of zero-centered
  normal prior. The shrinkage is greater for the log2 fold change
  estimates from genes with low counts and high dispersion, 
  as can be seen by the narrowing of spread of leftmost points 
  in the right plot.}
\label{fig:MA}
\end{figure}

In \deseqtwo{}, the function \Rfunction{plotMA} shows the log2
fold changes attributable to a given variable over the mean of normalized counts.
Points will be colored red if the adjusted $p$ value is less than 0.1.  
Points which fall out of the window are plotted as open triangles pointing 
either up or down.

<<MA, fig.width=4.5, fig.height=4.5>>=
plotMA(res, main="DESeq2", ylim=c(-2,2))
@

The MA-plot of log2 fold changes returned by \deseqtwo{} allows us to
see how the shrinkage of fold changes works for genes with low
counts. You can still obtain results tables which include the
``unshrunken'' log2 fold changes (for a simple comparison, the ratio
of the mean normalized counts in the two groups). A column
\Robject{lfcMLE} with the unshrunken maximum likelihood estimate (MLE)
for the log2 fold change will be added with an additional argument to
\Rfunction{results}:

<<resMLE>>=
resMLE <- results(dds, addMLE=TRUE)
head(resMLE, 4)
@ 

<<MANoPrior, echo=FALSE, fig.width=4.5, fig.height=4.5>>=
df <- data.frame(resMLE$baseMean, resMLE$lfcMLE, ifelse(is.na(res$padj), FALSE, res$padj < .1))
plotMA(df, main=expression(unshrunken~log[2]~fold~changes), ylim=c(-2,2))
@

After calling \Rfunction{plotMA}, one can use the function
\Rfunction{identify} to interactively detect the row number of
individual genes by clicking on the plot.

<<MAidentify, eval=FALSE>>=
identify(res$baseMean, res$log2FoldChange)
@ 

\subsubsection{Plot counts}

It can also be useful to examine the counts of reads for a single gene
across the groups. A simple function for making this
plot is \Rfunction{plotCounts}, which normalizes counts by sequencing depth
and adds a pseudocount of $\frac{1}{2}$ to allow for log scale plotting.
The counts are grouped by the variables in \Robject{intgroup}, where
more than one variable can be specified. Here we specify the gene
which had the smallest $p$ value from the results table created
above. You can select the gene to plot by rowname or by numeric index.

<<plotCounts, dev="pdf", fig.width=4.5, fig.height=5>>=
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
@ 

For customized plotting, an argument \Robject{returnData} specifies
that the function should only return a \Rclass{data.frame} for
plotting with \Rfunction{ggplot}.

<<plotCountsAdv, dev="pdf", fig.width=3.5, fig.height=3.5>>=
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="condition", 
                returnData=TRUE)
library("ggplot2")
ggplot(d, aes(x=condition, y=count)) + 
  geom_point(position=position_jitter(w=0.1,h=0)) + 
  scale_y_log10(breaks=c(25,100,400))
@ 

\begin{figure}
\centering
\includegraphics[width=.45\textwidth]{figure/plotCounts-1}
\includegraphics[width=.45\textwidth]{figure/plotCountsAdv-1}
\caption{
  \textbf{Plot of counts for one gene.} 
  The plot of normalized counts (plus a pseudocount of $\frac{1}{2}$)
  either made using the \Rfunction{plotCounts} function (left)
  or using another plotting library (right, using \CRANpkg{ggplot2}).}
\label{fig:plotcounts}
\end{figure}

\subsubsection{More information on results columns} \label{sec:moreInfo}

Information about which variables and tests were used can be found by calling
the function \Rfunction{mcols} on the results object.

<<metadata>>=
mcols(res)$description
@

For a particular gene, a log2 fold change of $-1$ for \Robject{condition treated vs untreated} 
means that the treatment induces a change in observed expression level of $2^{-1} = 0.5$ 
compared to the untreated condition. If the variable of interest is continuous-valued, 
then the reported log2 fold change is per unit of change of that variable.

\emph{Note:} some values in the results table can be set to \texttt{NA}, 
for either one of the following reasons:

\begin{enumerate} 
  \item If within a row, all samples have zero counts, 
    the \Robject{baseMean} column will be zero, and the
    log2 fold change estimates, $p$ value and adjusted $p$ value
    will all be set to \texttt{NA}.
  \item If a row contains a sample with an extreme count outlier
    then the $p$ value and adjusted $p$ value are set to \texttt{NA}.
    These outlier counts are detected by Cook's distance. Customization
    of this outlier filtering and description of functionality for 
    replacement of outlier counts and refitting is described in 
    Section~\ref{sec:outlierApproach},
  \item If a row is filtered by automatic independent filtering, 
    based on low mean normalized count, then only the adjusted $p$ value is 
    set to \texttt{NA}. Description and customization of independent filtering is 
    described in Section~\ref{sec:autoFilt}.
\end{enumerate}

The column of \Robject{log2FoldChange} for the default workflow will
contain shrunken estimates of fold change as mentioned above. It is
possible to add a column to the results table -- without rerunning the
analysis -- which contains the unshrunken, or maximum likelihood
estimates (MLE), log2 fold changes. This will add the column
\Robject{lfcMLE} directly after \Robject{log2FoldChange}.

<<addMLE>>=
head(results(dds, addMLE=TRUE),4)
@ 

\subsubsection{Exporting results to HTML or CSV files}

An HTML report of the results with plots and sortable/filterable columns
can be exported using the \Biocpkg{ReportingTools} package
on a \Rclass{DESeqDataSet} that has been processed by the \Rfunction{DESeq} function.
For a code example, see the ``RNA-seq differential expression'' vignette at
the \Biocpkg{ReportingTools} page, or the manual page for the 
\Rfunction{publish} method for the \Rclass{DESeqDataSet} class.

A plain-text file of the results can be exported using the 
base \R{} functions \Rfunction{write.csv} or \Rfunction{write.delim}. 
We suggest using a descriptive file name indicating the variable
and levels which were tested.

<<export, eval=FALSE>>=
write.csv(as.data.frame(resOrdered), 
          file="condition_treated_results.csv")
@

Exporting only the results which pass an adjusted $p$ value
threshold can be accomplished with the \Rfunction{subset} function,
followed by the \Rfunction{write.csv} function.

<<subset>>=
resSig <- subset(resOrdered, padj < 0.1)
resSig
@ 

\subsection{Multi-factor designs} \label{sec:multifactor}

Experiments with more than one factor influencing the counts can be 
analyzed using model formula including the additional variables. 
The data in the \Biocexptpkg{pasilla} package have a condition of interest 
(the column \Robject{condition}), as well as information on the type of sequencing 
which was performed (the column \Robject{type}), as we can see below:

<<multifactor>>=
colData(dds)
@

We create a copy of the \Rclass{DESeqDataSet}, so that we can rerun
the analysis using a multi-factor design.

<<copyMultifactor>>=
ddsMF <- dds
@

We can account for the different types of sequencing, and get a clearer picture
of the differences attributable to the treatment.  As \Robject{condition} is the
variable of interest, we put it at the end of the formula. Thus the \Rfunction{results}
function will by default pull the \Robject{condition} results unless 
\Robject{contrast} or \Robject{name} arguments are specified. 
Then we can re-run \Rfunction{DESeq}:

<<replaceDesign,cache=TRUE>>=
design(ddsMF) <- formula(~ type + condition)
ddsMF <- DESeq(ddsMF)
@

Again, we access the results using the \Rfunction{results} function.

<<multiResults>>=
resMF <- results(ddsMF)
head(resMF)
@

It is also possible to retrieve the log2 fold changes, $p$ values and adjusted
$p$ values of the \Robject{type} variable. The \Robject{contrast} argument of 
the function \Rfunction{results} takes a character vector of length three:
the name of the variable, the name of the factor level for the numerator
of the log2 ratio, and the name of the factor level for the denominator.
The \Robject{contrast} argument can also take other forms, as
described in the help page for \Rfunction{results} and in Section~\ref{sec:contrasts}.

<<multiTypeResults>>=
resMFType <- results(ddsMF, contrast=c("type","single-read","paired-end"))
head(resMFType)
@

If the variable is continuous or an interaction term (see Section~\ref{sec:interaction})
then the results can be extracted using the \Robject{name} argument to \Rfunction{results},
where the name is one of elements returned by \Robject{resultsNames(dds)}.

\newpage

%---------------------------------------------------
\section{Data transformations and visualization} \label{sec:transf}
%---------------------------------------------------
\subsection{Count data transformations}
%---------------------------------------------------

In order to test for differential expression, we operate on raw counts
and use discrete distributions as described in the previous Section~\ref{sec:de}.
However for other downstream analyses -- 
e.g. for visualization or clustering -- it might be useful 
to work with transformed versions of the count data. 

Maybe the most obvious choice of transformation is the logarithm.
Since count values for a gene can be zero in some
conditions (and non-zero in others), some advocate the use of
\emph{pseudocounts}, i.\,e.\ transformations of the form

\begin{equation}\label{eq:shiftedlog}
  y = \log_2(n + 1)\quad\mbox{or more generally,}\quad y = \log_2(n + n_0),
\end{equation}

where $n$ represents the count values and $n_0$ is a positive constant.

In this section, we discuss two alternative
approaches that offer more theoretical justification and a rational way
of choosing the parameter equivalent to $n_0$ above.
The \emph{regularized logarithm} or \emph{rlog} incorporates a prior on
the sample differences \cite{Love2014}, 
and the other uses the concept of variance stabilizing
transformations (VST) \cite{Tibshirani1988,sagmb2003,Anders:2010:GB}.
Both transformations produce transformed data on the $\log_2$ scale
which has been normalized with respect to library size.

The point of these two transformations, the \emph{rlog} and the VST,
is to remove the dependence of the variance on the mean,
particularly the high variance of the logarithm of count data when the
mean is low. Both \emph{rlog} and VST use the experiment-wide trend
of variance over mean, in order to transform the data to remove the
experiment-wide trend. Note that we do not require or
desire that all the genes have \emph{exactly} the same variance after
transformation. Indeed, in Figure~\ref{figure/vsd2-1} below, you will see
that after the transformations the genes with the same mean do not
have exactly the same standard deviations, but that the
experiment-wide trend has flattened. It is those genes with row
variance above the trend which will allow us to cluster samples into
interesting groups.

\subsubsection{Blind dispersion estimation}

The two functions, \Rfunction{rlog} and 
\Rfunction{varianceStabilizingTransformation}, have an argument \Robject{blind},
for whether the transformation should be blind to the sample information specified by the 
design formula. When \Robject{blind} equals \Robject{TRUE} (the default),
the functions will re-estimate the dispersions using only an intercept
(design formula $\sim 1$). This setting should be used in order to compare samples 
in a manner wholly unbiased by the information about experimental groups, 
for example to perform sample QA (quality assurance) as demonstrated below.

However, blind dispersion estimation is not the appropriate choice if one
expects that many or the majority of genes (rows) will have large differences
in counts which are explanable by the experimental design, and one wishes 
to tranform the data for downstream analysis. In this case, using blind dispersion
estimation will lead to large estimates of dispersion, as it attributes differences
due to experimental design as unwanted ``noise'', and shrinks the tranformed values
towards each other. By setting \Robject{blind} to \Robject{FALSE}, the dispersions 
already estimated will be used to perform transformations, or if not present, 
they will be estimated using the current design formula. Note that only the fitted
dispersion estimates from mean-dispersion trend line is used in the transformation.
So setting \Robject{blind} to \Robject{FALSE} is still mostly unbiased
by the information about the samples.

\subsubsection{Extracting transformed values}

The two functions return \Rclass{SummarizedExperiment} objects, as the
data are no longer counts. The \Rfunction{assay} function is used to
extract the matrix of normalized values:



Note that if you have many samples, and the \Rfunction{rlog} function
is taking too long, there is an argument \Robject{fast=TRUE}, which
will perform an approximation of the rlog: instead of shrinking the
samples independently, the function will find the optimal amount of
shrinkage for each gene given the mean counts. The optimization is
performed on the same likelihood of the data as the original rlog.
The speed-up for a dataset with 100 samples is around 15x.

\subsubsection{Regularized log transformation}

The function \Rfunction{rlog},
stands for \emph{regularized log}, transforming
the original count data to the log2 scale by fitting a model with a
term for each sample and a prior distribution on the coefficients
which is estimated from the data. This is the same kind of shrinkage 
(sometimes referred to as regularization, or moderation) of log fold changes
used by the \Rfunction{DESeq} and \Rfunction{nbinomWaldTest}, as seen in
Figure \ref{fig:MA}. The resulting data contains elements defined as:

$$ \log_2(q_{ij}) = \beta_{i0} + \beta_{ij} $$

where $q_{ij}$ is a parameter proportional to the expected true concentration of fragments for gene
$i$ and sample $j$ (see Section~\ref{sec:glm}), $\beta_{i0}$ is an intercept which does not undergo
shrinkage, and $\beta_{ij}$ is the sample-specific effect which is shrunk toward zero based on the
dispersion-mean trend over the entire dataset. The trend typically captures high dispersions for low
counts, and therefore these genes exhibit higher shrinkage from the\Rfunction{rlog}.

Note that, as $q_{ij}$ represents the part of the mean value $\mu_{ij}$ after the size factor $s_j$
has been divided out, it is clear that the rlog transformation inherently accounts for differences
in sequencing depth.  Without priors, this design matrix would lead to a non-unique solution,
however the addition of a prior on non-intercept betas allows for a unique solution to be found.
The regularized log transformation is preferable to the variance stabilizing transformation if the
size factors vary widely.

\subsubsection{Variance stabilizing transformation}

Above, we used a parametric fit for the dispersion. In this case,
the closed-form expression for the variance stabilizing transformation
is used by \Rfunction{varianceStabilizingTransformation}, which is derived in
the file \texttt{vst.pdf}, that is distributed in the package
alongside this vignette. If a local fit is used (option \Robject{fitType="locfit"}
to \Rfunction{estimateDispersions}) a numerical integration is used instead.

The resulting variance stabilizing transformation is shown in
Figure \ref{figure/vsd1-1}.  The code that produces the figure is hidden from
this vignette for the sake of brevity, but can be seen in the
\texttt{.Rnw} or \texttt{.R} source file. Note that the vertical axis in such
plots is the square root of the variance over all samples, so including 
the variance due to the experimental conditions. 
While a flat curve of the square root of variance over the mean 
may seem like the goal of such transformations, 
this may be unreasonable in the case of datasets with many true 
differences due to the experimental conditions.



\section{Acknowledgments}

We have benefited in the development of \deseqtwo{} from the help and
feedback of many individuals, including but not limited to: 
The Bionconductor Core Team,
Alejandro Reyes, Andrzej Oles, Aleksandra Pekowska, Felix Klein,
Vince Carey,
Devon Ryan, 
Steve Lianoglou, Jessica Larson, Christina Chaivorapol, Pan Du, Richard Bourgon,
Willem Talloen, 
Elin Videvall, Hanneke van Deutekom,
Todd Burwell, 
Jesse Rowley,
Igor Dolgalev.

\section{Session Info}

<<sessInfo, results="asis", echo=FALSE>>=
toLatex(sessionInfo())
@

<<resetOptions, results="hide", echo=FALSE>>=
options(prompt="> ", continue="+ ")
@ 

\bibliography{library}

\end{document}
